;
; (c) 2007 Gerald Roehrbein
; Gerald.Roehrbein@OraForecast.com
;
; Read LICENSE AGREEMENT at the end of this file
;
; Watchdog configuration file
; Define in section main with the processes key the processes to monitor.
; The admin key defines an address where to send messages if the program
; have to restart one ore more of the monitored processes.
;
; Service defines a service which is called to send a message to an admin.
; If mail=yes in a process section, than the admin will receive a message.
; You can also define service and mail inside a process section to send
; only messages to the owner of the process. This works regardless mail is set
; or not if these keys are defined!
; 
; Lines starting with a semikolon are treated as comments!
;
; Syntax hint:  Do not use spaces between key and equal sign.
; 		Everything is case sensitive!
;	        Start at the left side. 
;               Do not use leading blanks or other whitespace!	

[main]
;processes - List of sections which contain detail information of processes to check
;admin     - email of the admin to contact in case of an error
;            The system will send one mail to the admin and if defined a second 
;            to a user having a much more detailed knowledge of the problem
;service   - The command which we will use to send the admin a message
;on_errors_force_reboot - This parameter forces after a number of not recoverable watchdog 
;                         errors a reboot of the system.
;                         If this parameter is not set than Watchdog will die after
;                         an such errors like missed dynamic memory allocation or
;                         being unable to open a file or being unable to execute
;                         external modules which exists.
;
;
;http		- http server on		cmdline param -http -nohttp
;irq		- irq handler on		cmdline param -irq -noirq
;scheduler	- scheduler on			cmdline param -scheduler -noscheduler
;daemon		- start watchdog in daemon mode cmdline param -daemon -nodaemon
;
;MySQL settings
;mysql_host     - MySQL hostname
;mysql_user     - MySQL username
;mysql_pass     - MySQL password
;mysql_db       - MySQL database
;mysql_port     - Port where MySQL listens! Attention if set to -1 than gathering statistics is complete offline!
;

;processes=ddclient,apache2,postfix,courier,mysql,oracle,oraclelistener,oracleRAC,openLDAP,generic
processes=ddclient,apache2,postfix,courier,mysql,openLDAP,generic
;processes=generic
admin=bbs@oraforecast.com
service=mailx -s "Watchdog @$host" $admin "Watchdog found and tried to solve a problem with process $process."
on_errors_force_reboot=100
http=on
daemon=on

mysql_host=localhost
mysql_user=watchdog
mysql_pass=watchdog
mysql_db=watchdog

; Remember: If mysql_port is set to -1 than no statistics is written to the database !
mysql_port=0
mysql_socket= /var/run/mysqld/mysqld.sock


;
; Statistics gathering level:
;
; stat = none                 0
; stat = all                  1
; stat = monitored            2
; stat = not_monitored        3
;

stat=monitored

[http]

;HTTP Server configuration
;root		- HTML root directory
;cgi-bin	- cgi directory
;port		- port where HTTP will serve
;index_file	- default index_file
 
root=/etc/watchdog/htdocs
cgi-bin=/cgi-bin
port=81
index_file=index.html

[scheduler]
;handler	- on/off turn on scheduler
;timing		- number of seconds
handler=on
timing=60

[irq]
;handler	- on/off turn on interrupthandler
handler=on

[ddclient]
; Documentation for complete set of params for a process section:
; check    - pattern which should exist in the process list or /proc/<pid>/cmdline file
;            pattern have to be a substring of cmdline which can be used
;            to identify the running process correctly
; count    - expected number of processes with this pattern
; external - user defined module which return 1 if succesful and 0 if not
;            This could be used to do hangchecks of the module.
; restart  - command to restart process on error 
;            This command must ensure that it returns 0 if it could start the process
;            succesfully and another value if not!
;            Watchdog will not monitor that this job was really succesfully.
; mail     - in case of an error send mail to admin
; owner    - the owner of this program we have to inform
; service  - a message service to use to send a message to a special user defined by owner
; message  - file which contains a message to send in case of an error
; retries  - number of tests before sending a mail. delay at main defines delay in seconds between retries
; onerror  - in case of an error (after unsuccesful number of retries) execute shell command
; debug    - debug messages to syslog dependent on environment variable DBG_ERRCLASS
; syslog   - error messages and warnings to syslog dependent on environment variable DBD_ERRCLASS
; on_errors_force_reboot - if the onerror command does not exist or is not executed without an
;                          error than Watchdog will reboot the operating system if this
;                          parameter is set to yes and an unrecoverable error occurs!
;
;schedule  - cron like scheduling
;	     minute hour day month year
;	     example:
;            0,5,10,15,20,25,30,35,40,45,50,55 
;            0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 
;            mo,tu,we,th,fr,sa,su
;            jan,feb,mar,apr,mai,jun,jul,aug,sep,oct,nov,dec
;            2007,2008,2009,2010
;            use '*' as aliase for each group. Minute can be in intervall  0-59
;
;stat       - yes or no for MySQL based logging of this monitored process

 
check=ddclient
count=1
external=/etc/watchdog/modules/ddclient/mod_ddclient
restart=/etc/watchdog/modules/ddclient/restart/restart.sh
mail=yes
owner=bbs@oraforecast.com
service=mailx -s "Watchdog @$host" $owner
;message=/etc/watchdog/modules/ddclient/message.txt
retries=5
delay=10
;onerror=shutdown -r now
debug=yes
syslog=yes
on_error_force_reboot=no
schedule=* * * * *
stat=yes

[apache2]
check=apache2
external=/etc/watchdog/modules/apache2/mod_apache2
restart=/etc/watchdog/modules/apache2/restart/restart.sh
mail=yes
debug=no
syslog=no
schedule=* * * * *
stat=yes

[postfix]
check=saslauthd
external=/etc/watchdog/modules/postfix/mod_postfix
restart=/etc/watchdog/modules/postfix/restart/restart.sh
mail=yes
debug=no
syslog=no
schedule=* * * * *
stat=no

[courier]
check=couriertcpd
external=/etc/watchdog/modules/courier/mod_courier
restart=/etc/watchdog/modules/courier/restart/restart.sh
mail=yes
debug=no
syslog=no
schedule=* * * * *
stat=no

[mysql]
check=mysqld
external=/etc/watchdog/modules/mysql/mod_mysql
restart=/etc/watchdog/modules/mysql/restart/restart.sh
mail=yes
debug=no
syslog=no
schedule=* * * * *
stat=yes

[oracle]
check=oracle
external=/etc/watchdog/modules/oracle/rdbms/mod_oracle
restart=/etc/watchdog/modules/oracle/rdbms/restart/restart.sh
mail=yes
retries=2
delay=5
debug=yes
syslog=yes
schedule=* * * * *
stat=no

[oraclelistener]
check=listener
external=/etc/watchdog/modules/oracle/listener/mod_listener
restart=/etc/watchdog/modules/oracle/listener/restart/restart.sh
mail=yes
retries=2
delay=5
debug=yes
syslog=yes
schedule=* * * * *
stat=no

[oracleRAC]
check=gsd
external=/etc/watchdog/modules/oracle/rac/mod_rac
restart=/etc/watchdog/modules/oracle/rac/restart/restart.sh
mail=yes
retries=2
delay=5
debug=yes
syslog=yes
schedule=* * * * *
stat=no

[openLDAP]
check=slapd
external=/etc/watchdog/modules/openLDAP/mod_ldap
restart=/etc/watchdog/modules/openLDAP/restart/restart.sh
mail=yes
retries=2
delay=5
debug=yes
syslog=yes
schedule=* * * * *
stat=yes

[generic]
;
; Generic example 
;

check=generic
;external=/etc/watchdog/modules/generic/mod_generic
restart=/etc/watchdog/modules/generic/restart/restart.sh
onerror=/etc/watchdog/modules/generic/onerror/onerror.sh
mail=yes
owner=Gerald.Roehrbein@OraForecast.com
service=mailx -s "Watchdog @$host" $owner
message=/etc/watchdog/modules/generic/message.txt
;retries=10
retries=1
delay=2
debug=yes
syslog=yes
on_error_force_reboot=no
schedule=* * * * *
stat=no

[END]
;    =============================LICENSE.TXT===============================
;    Watchdog , a simple to use Linux  High Availability management software
;    Copyright (C) 1989-2007  Gerald Roehrbein
; 
;    This software contains libraries I've alread implemented between 1989
;    and 2007.
; 
;    This program is free software; you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation; either version 2 of the License, or
;    (at your option) any later version.
; 
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
; 
;    You should have received a copy of the GNU General Public License along
;    with this program; if not, write to the Free Software Foundation, Inc.,
;    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
; 
; 
;    Contact information:
; 
;    e-mail: Gerald.Roehrbein@OraForecast.com
; 
;    Gerald Roehrbein
;    Boskamp 19
;    24214 Gettorf
;    Germany
; 
; 
;    Watchdog version 0.9, Copyright (C) 1989-2007 by Gerald Roehrbein 
;    Watchdog comes with ABSOLUTELY NO WARRANTY
;    This is free software, and you are welcome to redistribute it
;    under certain conditions; Please read additional LICENSE file.
; 
; 

